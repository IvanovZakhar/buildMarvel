{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","resources/img/yana.jpg","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","images","AppBanner","className","avengers","avengersLogo","ComicsList","comicsList","setComicsList","setOffset","charEnded","setCharEnded","useEffect","onRequest","onComicsListLoaded","newComicsList","ended","length","then","arr","item","i","imgStyle","to","renderItems","errorMessage","spinner","Spinner","onClick","ComicsPage"],"mappings":"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","file":"static/js/4.e1241825.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: \"block\", width: \"250px\", height: \"250px\", \r\n        objectFit: 'contain', margin: \"0 auto\" }} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=baaab7750b9c96f0a5da18949146680e';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n   \r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n       return{\r\n        id: comics.id,\r\n        title: comics.title,\r\n        description: comics.description || 'There is no description',\r\n        pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n        language: comics.textObjects.language || 'en-us',\r\n        price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n        img: comics.images[0] ? `${comics.images[0].path}.${comics.images[0].extension}` : 'none'\r\n       } \r\n    }\r\n\r\n    return {loading, error, getCharacter, getAllCharacters, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","export default __webpack_public_path__ + \"static/media/yana.d11f36ab.jpg\";","import './comicsList.scss';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport img from '../../resources/img/yana.jpg'\n\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [offset, setOffset] = useState(8)\n    const {loading, error, getAllComics} = useMarvelService();\n    const [charEnded, setCharEnded] = useState(false);\n\n        useEffect(() => {\n            onRequest(offset);\n        }, []) \n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList(comicsList => [...comicsList, ...newComicsList])\n        setOffset(offset => offset + 8)\n        setCharEnded(charEnded => ended)\n    }\n\n    const onRequest = (offset) => {\n        getAllComics(offset)\n        .then(onComicsListLoaded)\n    }\n\n    function renderItems(arr){\n        const items = arr.map((item, i) => {\n         \n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'none') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                    <li key={i} className=\"comics__item\">\n                        <Link to={`/comics/${item.id}`}>\n                            <img style={imgStyle} \n                                 src={item.img === 'none' ? img : item.img} \n                                 alt={item.title} \n                                 className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price ? `${item.price}$` : 'Not on sale'}</div>\n                        </Link>\n                    </li>\n                    )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {items}\n            {errorMessage}\n            {spinner}\n            <button\n                 onClick={() => onRequest()} \n                 className=\"button button__main button__long\"\n                 style={{'display': charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}