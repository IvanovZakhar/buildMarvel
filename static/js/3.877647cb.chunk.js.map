{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundaries/ErrorBoundaries.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","images","View","imgStyle","className","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","newItemLoading","setItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","console","log","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","ErrorBoundaries","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.877647cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: \"block\", width: \"250px\", height: \"250px\", \r\n        objectFit: 'contain', margin: \"0 auto\" }} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=baaab7750b9c96f0a5da18949146680e';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n   \r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n       return{\r\n        id: comics.id,\r\n        title: comics.title,\r\n        description: comics.description || 'There is no description',\r\n        pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n        language: comics.textObjects.language || 'en-us',\r\n        price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n        img: comics.images[0] ? `${comics.images[0].path}.${comics.images[0].extension}` : 'none'\r\n       } \r\n    }\r\n\r\n    return {loading, error, getCharacter, getAllCharacters, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(()=> {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={() => updateChar()} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n\n}\n\nconst View = ({char}) => {\n    let {name, description, thumbnail, homepage, wiki} = char;\n    // if(description.length >= 230){\n       \n    //    description = `${description.slice(0, 240)}...`\n    // } else if (description.length === 0){\n    //     description = 'Нет описания'\n    // }\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n   \n    return (\n            <div className=\"randomchar__block\">\n                <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">{description}</p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setChar] = useState([]);\n    const [newItemLoading, setItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() =>{\n        onRequest(offset, true);\n    }, [])\n\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setItemLoading(false) : setItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setChar(charList => [...charList, ...newCharList])\n        setItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n\n    const itemRefs = useRef([]);\n\n\n   const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        console.log(arr)\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n\n\n\n        \n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    \n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const {error, loading, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n    \n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId){\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);  \n    }\n\n\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n        \n        return (\n            <div className=\"char__info\">\n                {errorMessage}\n                {spinner}\n                {content}\n                {skeleton}\n                \n            </div>\n        )\n    \n}\n\nconst View = ({char}) => {\n\n   const {name, description, thumbnail, homepage, wiki, comics} = char;\n    \n   let imgStyle = {'objectFit' : 'cover'};\n   if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n       imgStyle = {'objectFit' : 'contain'};}\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"thumbnail\"  style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'This is no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            // eslint-disable-next-line\n                            if(i > 9) return;\n                    \n                            return(\n                            <li key={i} className=\"char__comics-item\">\n                               {item.name}\n                            </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundaries extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n    \r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n \r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error){\r\n            return <ErrorMessage/>\r\n        }\r\n         \r\n       \r\n       return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundaries;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundaries from \"../errorBoundaries/ErrorBoundaries\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }    \r\n\r\n    return (\r\n    <>\r\n        <ErrorBoundaries>\r\n                <RandomChar/>\r\n        </ErrorBoundaries>\r\n    \r\n        <div className=\"char__content\">\r\n            <ErrorBoundaries>\r\n                    <CharList onCharSelected = {onCharSelected}/>\r\n            </ErrorBoundaries>\r\n            \r\n            <ErrorBoundaries>\r\n                <CharInfo charId={selectedChar}/>\r\n            </ErrorBoundaries>\r\n            \r\n        </div>\r\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}